name: Playwright JS

on: [push, workflow_dispatch]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      site: ${{ steps.mk.outputs.site }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'npm' }
      - run: npm ci
      - run: npx playwright install --with-deps
      - run: npx playwright test --reporter=junit,html,line --output=./test-results

      # (keep your artifacts if you want)
      - uses: actions/upload-artifact@v4
        if: always()
        with:
             name: junit-results
             path: test-results/**/*.xml

      - name: Update manifest.json
        env:
          RUN_NUMBER: ${{ github.run_number }}
          RUN_ID: ${{ github.run_id }}
          SHA: ${{ github.sha }}
          REF_NAME: ${{ github.ref_name }}
          EVENT_NAME: ${{ github.event_name }}
          ACTOR: ${{ github.actor }}
        run: |
          python3 - <<'PY'
          import json, os, time, glob, xml.etree.ElementTree as ET
          site_dir = "site"; os.makedirs(site_dir, exist_ok=True)
          manifest_path = os.path.join(site_dir, "manifest.json")
          try:
            manifest = json.load(open(manifest_path)) 
        except Exception:
            manifest = []
    
          tests = failures = errors = skipped = 0
          total_time = 0.0
          suite_name = "playwright"
          found = False

            for fp in glob.glob("artifacts/junit/**/*.xml", recursive=True):
              found = True
           try:
            root = ET.parse(fp).getroot()
            suites = [root] if root.tag == "testsuite" else root.findall(".//testsuite")
            for ts in suites:
                tests    += int(ts.get("tests", 0))
                failures += int(ts.get("failures", 0))
                errors   += int(ts.get("errors", 0))
                skipped  += int(ts.get("skipped", ts.get("disabled", 0) or 0))
                try: total_time += float(ts.get("time", 0.0) or 0.0)
                except: pass
        except Exception: pass

    status = "pass" if found and failures == 0 and errors == 0 else ("unknown" if not found else "fail")

    entry = {
      "run_number": int(os.environ["RUN_NUMBER"]),
      "run_id": int(os.environ["RUN_ID"]),
      "sha": os.environ["SHA"],
      "branch": os.environ["REF_NAME"],
      "event": os.environ["EVENT_NAME"],
      "actor": os.environ["ACTOR"],
      "timestamp": int(time.time()),
      "suite": suite_name,
      "stats": { "tests": tests, "failures": failures, "errors": errors, "skipped": skipped, "time": round(total_time, 2) },
      "status": status,
      "path": f"runs/{os.environ['RUN_NUMBER']}/"
    }

    manifest.append(entry)
    manifest = sorted(manifest, key=lambda x: x["run_number"])[-200:]
    json.dump(manifest, open(manifest_path, "w"), indent=2)
    PY

     
