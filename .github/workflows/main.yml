name: Playwright JS

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write   # needed to push to gh-pages

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'npm' }

      - run: npm ci
      - run: npx playwright install --with-deps
      - run: npx playwright test

      # artifacts (keep your names)
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/report.html

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-results
          path: test-results/results.xml

  publish-pages:
    needs: test
    runs-on: ubuntu-latest

    steps:
      # 1) pull existing gh-pages (if first run, weâ€™ll create it)
      - name: Checkout gh-pages (or create)
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: site
        continue-on-error: true

      - name: Ensure site dir exists
        run: |
          mkdir -p site

      # 2) bring in current run artifacts
      - name: Download junit artifact
        uses: actions/download-artifact@v4
        with:
          name: junit-results
          path: artifacts/junit

      - name: Download report artifact
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: artifacts/report

      # 3) write this run into site/runs/<run_number>/
      - name: Stage current run
        env:
          RUN_DIR: site/runs/${{ github.run_number }}
        run: |
          set -eux
          mkdir -p "$RUN_DIR"
          # copy artifacts into the run folder
          cp -r artifacts/junit/* "$RUN_DIR/" || true
          cp -r artifacts/report/* "$RUN_DIR/" || true

      # 4) Parse JUnit XML and update manifest.json
      - name: Update manifest.json
        env:
          RUN_NUMBER: ${{ github.run_number }}
          RUN_ID: ${{ github.run_id }}
          SHA: ${{ github.sha }}
          REF_NAME: ${{ github.ref_name }}
          EVENT_NAME: ${{ github.event_name }}
          ACTOR: ${{ github.actor }}
        run: |
          python3 - <<'PY'
          import json, os, time, xml.etree.ElementTree as ET

          site_dir = "site"
          os.makedirs(site_dir, exist_ok=True)
          manifest_path = os.path.join(site_dir, "manifest.json")
          try:
              with open(manifest_path, "r") as f:
                  manifest = json.load(f)
          except Exception:
              manifest = []

          # parse junit xml
          junit_path = "artifacts/junit/test-results/results.xml"
          stats = {"tests": 0, "failures": 0, "errors": 0, "skipped": 0, "time": 0.0}
          suite_name = ""
          if os.path.exists(junit_path):
              try:
                  tree = ET.parse(junit_path)
                  root = tree.getroot()
                  # root may be <testsuite> or <testsuites>
                  if root.tag == "testsuite":
                      ts = root
                      suite_name = ts.get("name", "")
                      stats["tests"]    = int(ts.get("tests", 0))
                      stats["failures"] = int(ts.get("failures", 0))
                      stats["errors"]   = int(ts.get("errors", 0))
                      stats["skipped"]  = int(ts.get("skipped", 0) or ts.get("disabled", 0) or 0)
                      stats["time"]     = float(ts.get("time", 0.0) or 0.0)
                  else:
                      # aggregate across children
                      for ts in root.findall(".//testsuite"):
                          if not suite_name:
                              suite_name = ts.get("name", "")
                          stats["tests"]    += int(ts.get("tests", 0))
                          stats["failures"] += int(ts.get("failures", 0))
                          stats["errors"]   += int(ts.get("errors", 0))
                          stats["skipped"]  += int(ts.get("skipped", 0) or ts.get("disabled", 0) or 0)
                          try:
                              stats["time"] += float(ts.get("time", 0.0) or 0.0)
                          except:
                              pass
              except Exception as e:
                  suite_name = "parse-error"
          else:
              suite_name = "no-junit"

          status = "pass" if (stats["failures"] == 0 and stats["errors"] == 0) else "fail"

          entry = {
              "run_number": int(os.environ["RUN_NUMBER"]),
              "run_id": int(os.environ["RUN_ID"]),
              "sha": os.environ["SHA"],
              "branch": os.environ["REF_NAME"],
              "event": os.environ["EVENT_NAME"],
              "actor": os.environ["ACTOR"],
              "timestamp": int(time.time()),
              "suite": suite_name,
              "stats": stats,
              "status": status,
              "path": f"runs/{os.environ['RUN_NUMBER']}/"
          }

          # append and keep last 200 runs
          manifest.append(entry)
          manifest = sorted(manifest, key=lambda x: x["run_number"])[-200:]

          with open(manifest_path, "w") as f:
              json.dump(manifest, f, indent=2)
          PY

      # 5) Create/refresh index.html (single-page view)
      - name: Write index.html (if missing or refresh template)
        run: |
          cat > site/index.html <<'HTML'
          <!doctype html>
          <html>
          <head>
            <meta charset="utf-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>
            <title>Playwright Runs</title>
            <link rel="preconnect" href="https://cdn.jsdelivr.net"/>
            <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
            <style>
              body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:24px;}
              h1{margin:0 0 12px;}
              .muted{color:#666}
              table{border-collapse:collapse;width:100%;margin-top:16px}
              th,td{padding:8px 10px;border-bottom:1px solid #eee;text-align:left;font-size:14px}
              th{background:#fafafa}
              .pill{padding:2px 8px;border-radius:999px;font-weight:600;font-size:12px;display:inline-block}
              .pass{background:#e7f8ee;color:#0a7f40}
              .fail{background:#ffebea;color:#b00020}
              .grid{display:grid;grid-template-columns:1fr;gap:24px}
              @media (min-width:900px){.grid{grid-template-columns: 1.2fr .8fr;}}
              canvas{max-height:360px}
              a{color:#0069c2;text-decoration:none}
              a:hover{text-decoration:underline}
              footer{margin-top:24px;color:#777;font-size:12px}
            </style>
          </head>
          <body>
            <h1>Playwright Test Runs</h1>
            <div class="muted">Branch, status, and summary from JUnit. Click a run to view raw files.</div>

            <div class="grid">
              <div>
                <table id="runs">
                  <thead>
                    <tr>
                      <th>#</th><th>Status</th><th>Branch</th><th>Tests</th><th>Fails</th><th>Errors</th><th>Skipped</th><th>Time (s)</th><th>When</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
              </div>
              <div>
                <canvas id="chart"></canvas>
              </div>
            </div>

            <footer>
              Built from <code>gh-pages</code> branch. Last updated <span id="updated"></span>.
            </footer>

            <script>
            async function main(){
              const res = await fetch('manifest.json', {cache: 'no-store'});
              const data = await res.json();
              data.sort((a,b)=>b.run_number-a.run_number);
              const tbody = document.querySelector('#runs tbody');
              const fmt = n => Intl.NumberFormat().format(n);
              const rel = ts => new Date(ts*1000).toLocaleString();

              const last15 = data.slice(0,15).reverse();

              for(const r of data){
                const url = r.path; // runs/<run>/
                const tag = r.status === 'pass' ? '<span class="pill pass">PASS</span>' : '<span class="pill fail">FAIL</span>';
                const tr = document.createElement('tr');
                tr.innerHTML = `
                  <td><a href="${url}">#${r.run_number}</a></td>
                  <td>${tag}</td>
                  <td>${r.branch}</td>
                  <td>${fmt(r.stats.tests)}</td>
                  <td>${fmt(r.stats.failures)}</td>
                  <td>${fmt(r.stats.errors)}</td>
                  <td>${fmt(r.stats.skipped)}</td>
                  <td>${fmt(Math.round((r.stats.time||0)*10)/10)}</td>
                  <td>${rel(r.timestamp)}</td>`;
                tbody.appendChild(tr);
              }

              // Chart last 15 runs
              const labels = last15.map(r=>`#${r.run_number}`);
              const passes = last15.map(r=> Math.max(0, r.stats.tests - r.stats.failures - r.stats.errors - r.stats.skipped));
              const fails = last15.map(r=> r.stats.failures + r.stats.errors);

              new Chart(document.getElementById('chart'), {
                type: 'bar',
                data: {
                  labels,
                  datasets: [
                    {label:'Pass', data: passes, stack:'s'},
                    {label:'Fail', data: fails, stack:'s'}
                  ]
                },
                options: {
                  responsive: true,
                  plugins: { legend: { position:'top' } },
                  scales: { x: { stacked:true }, y:{ stacked:true, beginAtZero:true } }
                }
              });

              document.getElementById('updated').textContent = new Date().toLocaleString();
            }
            main();
            </script>
          </body>
          </html>
          HTML

      # 6) Commit & push to gh-pages
      - name: Commit and push gh-pages
        run: |
          set -eux
          cd site
          git init
          git checkout -B gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Add run ${{ github.run_number }}"
          git remote add origin "https://github.com/${{ github.repository }}.git" || true
          git push -u origin gh-pages
