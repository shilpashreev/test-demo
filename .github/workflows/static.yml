name: Playwright Tests & Upload Report to Cloudsmith

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allows manual running of the workflow
  workflow_dispatch:

# Grant necessary permissions
permissions:
  contents: read      # For checking out the code
  checks: write       # To publish test results summary
  id-token: write     # Needed if you use any other OIDC auth, kept as safety

jobs:
  build_test_and_upload:
    name: Run Tests and Upload Report
    runs-on: ubuntu-latest
    permissions:
      checks: write # Required for test reporter
    
    steps:
      # 1. Checkout Code
      - name: Checkout repository code
        uses: actions/checkout@v4
        # fetch-depth: 0 is not needed anymore since you are not committing history.
        
      # Setup Environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install dependencies and browsers
        run: |
          npm install 
          npx playwright install --with-deps
          
      # Run Tests and Generate Report (Playwright saves report data to 'playwright-report' by default)
      - name: Run Playwright tests
        # We use '|| true' to allow the workflow to continue even if tests fail, 
        # so the report can still be uploaded.
        run: npx playwright test || true
      
      # Publish JUnit Summary (Optional, but good practice)
      # This assumes you are configuring Playwright to output a JUnit XML report (e.g., to results/junit.xml)
      - name: Publish JUnit XML Report to Checks
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Playwright Test Results
          path: results/junit.xml
          reporter: jest-junit
          fail-on-error: true
          
      # ðŸ“Œ Prepare and upload Playwright Report for Cloudsmith
      
      # 2. Archive the Playwright Report folder
      - name: Archive Playwright Report for Cloudsmith
        # Playwright's default HTML report folder is 'playwright-report/'
        # Adjust 'playwright-report/' if your config uses a different directory.
        run: tar -czvf playwright-report-${{ github.run_id }}.tar.gz playwright-report/
        
      # 3. Upload Report to Cloudsmith
      - name: Upload Report to Cloudsmith
        run: |
          REPO_ID="${{ secrets.CLOUD_PROJECT }}"  # e.g., 'my-org/my-repo'
          FILENAME="playwright-report-${{ github.run_id }}.tar.gz"

          # Print the URL being used
          echo "Cloudsmith Repository ID: $REPO_ID"
          echo "Cloudsmith API URL: $UPLOAD_URL"
          
          # Use curl to upload the file to Cloudsmith's generic repository format
          # This requires CLOUD_API_KEY to be a secret containing your Cloudsmith API token.
          curl -sS --fail -u "csa_6c7eae9f603d198f4142d8ac0fc409LEFHQg": \
            -F "package_file=@$FILENAME" \
            "https://api.cloudsmith.io/v1/repos/demo-dgov/test1/uploads/generic/"
        env:
          # Injecting the key securely into the environment for curl
          CLOUDSMITH_API_KEY: "csa_6c7eae9f603d198f4142d8ac0fc409LEFHQg"
